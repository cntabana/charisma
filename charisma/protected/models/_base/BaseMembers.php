<?php

/**
 * This is the model base class for the table "members".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Members".
 *
 * Columns in table "members" available as properties of the model,
 * followed by relations of table "members" available as properties of the model.
 *
 * @property integer $id
 * @property string $cardnumber
 * @property string $firstname
 * @property string $middlename
 * @property string $lastname
 * @property string $issuedate
 * @property string $expireddate
 * @property string $birthday
 * @property string $sex
 * @property string $phonenumber
 * @property string $address
 * @property string $email
 * @property integer $iddistrict
 * @property integer $idsector
 * @property string $nationality
 * @property integer $status
 * @property integer $type
 * @property string $photo
 * @property string $title
 *
 * @property Beneficaire[] $beneficaires
 * @property Invoice[] $invoices
 * @property Sector $idsector0
 * @property District $iddistrict0
 */
abstract class BaseMembers extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'members';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Members|Members', $n);
	}

	public static function representingColumn() {
		return 'cardnumber';
	}

	public function rules() {
		return array(
			array('cardnumber,firstname, lastname, issuedate, expireddate, birthday, sex, iddistrict, idsector, status, type, photo, title', 'required'),
			array('iddistrict, idsector, status, type', 'numerical', 'integerOnly'=>true),
			array('cardnumber', 'length', 'max'=>15),
			array('firstname, middlename, lastname, phonenumber', 'length', 'max'=>20),
			array('sex', 'length', 'max'=>1),
			array('cardnumber', 'unique'),
			array('address', 'length', 'max'=>30),
			array('email, photo', 'length', 'max'=>50),
			array('nationality', 'length', 'max'=>40),
			array('title', 'length', 'max'=>7),
			array('firstname, phonenumber, address, email, nationality', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, cardnumber, firstname, middlename, lastname, issuedate, expireddate, birthday, sex, phonenumber, address, email, iddistrict, idsector, nationality, status, type, photo, title', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'beneficaires' => array(self::HAS_MANY, 'Beneficaire', 'idmember'),
			'invoices' => array(self::HAS_MANY, 'Invoice', 'idmember'),
			'idsector0' => array(self::BELONGS_TO, 'Sector', 'idsector'),
			'iddistrict0' => array(self::BELONGS_TO, 'District', 'iddistrict'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
		'id' => Yii::t('app', 'ID'),
			'cardnumber' => Yii::t('app', 'Membersip Card'),
			'firstname' => Yii::t('app', 'Firstname'),
			'middlename' => Yii::t('app', 'Other Names'),
			'lastname' => Yii::t('app', 'Surnames'),
			'issuedate' => Yii::t('app', 'Card Issued Date'),
			'expireddate' => Yii::t('app', 'Card Expire Date'),
			'birthday' => Yii::t('app', 'Birthday'),
			'sex' => Yii::t('app', 'Gender'),
			'phonenumber' => Yii::t('app', 'Phone Number'),
			'address' => Yii::t('app', 'Address'),
			'nationality' => Yii::t('app', 'Nationality'),
			'status' => Yii::t('app', 'Status'),
			'type' => Yii::t('app', 'Type'),
			'title' => Yii::t('app', 'Title'),
			'photo' => Yii::t('app', 'Photo'),
			'beneficaires' => null,
			'invoices' => null,
			'email' => Yii::t('app', 'Email'),
			'iddistrict' => null,
			'idsector' => null,
			
			'beneficaires' => null,
			'invoices' => null,
			'idsector0' => null,
			'iddistrict0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
        if(isset($_POST['cardNumberSearch'])){

        	 $criteria->addCondition('cardnumber='.$_POST['cardNumberSearch']);
        }
		$criteria->compare('id', $this->id);
		$criteria->compare('cardnumber', $this->cardnumber, true);
		$criteria->compare('firstname', $this->firstname, true);
		$criteria->compare('middlename', $this->middlename, true);
		$criteria->compare('lastname', $this->lastname, true);
		$criteria->compare('issuedate', $this->issuedate, true);
		$criteria->compare('expireddate', $this->expireddate, true);
		$criteria->compare('birthday', $this->birthday, true);
		$criteria->compare('sex', $this->sex, true);
		$criteria->compare('phonenumber', $this->phonenumber, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('iddistrict', $this->iddistrict);
		$criteria->compare('idsector', $this->idsector);
		$criteria->compare('nationality', $this->nationality, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('type', $this->type);
		$criteria->compare('photo', $this->photo, true);
		$criteria->compare('title', $this->title, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}


static function getSexs()
{
return array(
    array('id'=>'1', 'sex'=>'Female'),
    array('id'=>'0', 'sex'=>'Male'),
);
}
static function getSex($onoff)
{
if($onoff == '0') 
    return 'Male';
else 
    return 'Female';
}

static function getStatuss()
{
return array(
    array('id'=>'1', 'status'=>'Active'),
    array('id'=>'0', 'status'=>'Inactive'),
);
}
static function getStatus($onoff)
{
if($onoff == 1) 
    return 'Active';
else 
    return 'Inactive';
}


static function getTypes()
{
return array(
    array('id'=>'1', 'type'=>'Staff'),
    array('id'=>'0', 'type'=>'Student'),
);
}
static function getType($onoff)
{
if($onoff == 1) 
    return 'Staff';
else 
    return 'Student';
}




}