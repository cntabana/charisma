<?php

/**
 * This is the model base class for the table "hospital".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Hospital".
 *
 * Columns in table "hospital" available as properties of the model,
 * followed by relations of table "hospital" available as properties of the model.
 *
 * @property integer $id
 * @property string $hopitalName
 * @property string $address
 * @property integer $type
 * @property integer $iduser
 *
 * @property Users $iduser0
 * @property Invoice[] $invoices
 */
abstract class BaseHospital extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'hospital';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Partner Hospital and Clinic | Partner Hospitals and Clinics', $n);
	}

	public static function representingColumn() {
		return 'hopitalName';
	}

	public function rules() {
		return array(
			array('hopitalName, type, iduser', 'required'),
			array('type, iduser', 'numerical', 'integerOnly'=>true),
			array('hopitalName', 'length', 'max'=>50),
			array('address', 'length', 'max'=>30),
			array('address', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, hopitalName, address, type, iduser', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'iduser0' => array(self::BELONGS_TO, 'Users', 'iduser'),
			'invoices' => array(self::HAS_MANY, 'Invoice', 'idhospital'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'hopitalName' => Yii::t('app', 'Hopital Name'),
			'address' => Yii::t('app', 'Address'),
			'type' => Yii::t('app', 'Type'),
			'iduser' => null,
			'iduser0' => null,
			'invoices' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('hopitalName', $this->hopitalName, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('type', $this->type);
		$criteria->compare('iduser', $this->iduser);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

static function getTypes()
{
return array(
    array('id'=>'0', 'type'=>'Hospital'),
    array('id'=>'1', 'type'=>'Pharmacy'),
);
}
static function getType($onoff)
{
if($onoff == 1) 
    return 'Parmacy';
else 
    return 'Hospital';
}
}