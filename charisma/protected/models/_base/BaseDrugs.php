<?php

/**
 * This is the model base class for the table "drugs".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Drugs".
 *
 * Columns in table "drugs" available as properties of the model,
 * followed by relations of table "drugs" available as properties of the model.
 *
 * @property integer $id
 * @property string $drug
 * @property integer $generic
 * @property integer $cash
 * @property integer $availability
 * @property integer $special
 *
 * @property BillingDrug[] $billingDrugs
 * @property PriceHistory[] $priceHistories
 */
abstract class BaseDrugs extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'drugs';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Pharmacy|Pharmacy', $n);
	}

	public static function representingColumn() {
		return 'drug';
	}

	public function rules() {
		return array(
			array('drug, generic, cash, availability, special', 'required'),
			array('generic, cash, availability, special', 'numerical', 'integerOnly'=>true),
			array('drug', 'length', 'max'=>50),
			array('id, drug, generic, cash, availability, special', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'billingDrugs' => array(self::HAS_MANY, 'BillingDrug', 'iddrug'),
			'priceHistories' => array(self::HAS_MANY, 'PriceHistory', 'iddrug'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'drug' => Yii::t('app', 'Drug'),
			'generic' => Yii::t('app', 'Generic'),
			'cash' => Yii::t('app', 'Cash'),
			'availability' => Yii::t('app', 'Availability'),
			'special' => Yii::t('app', 'Special'),
			'billingDrugs' => null,
			'priceHistories' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('drug', $this->drug, true);
		$criteria->compare('generic', $this->generic);
		$criteria->compare('cash', $this->cash);
		$criteria->compare('availability', $this->availability);
		$criteria->compare('special', $this->special);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
static function getAvailabilities()
	{
	return array(
	    array('id'=>'1', 'availability'=>'Yes'),
	    array('id'=>'0', 'availability'=>'No'),
	);
	}
	static function getAvailability($onoff)
	{
	if($onoff == 1) 
	    return 'Yes';
	else 
	    return 'No';
	}

	static function getGenerics()
	{
	return array(
	    array('id'=>'1', 'generic'=>'Yes'),
	    array('id'=>'0', 'generic'=>'No'),
	);
	}
	static function getGeneric($onoff)
	{
	if($onoff == 1) 
	    return 'Yes';
	else 
	    return 'No';
	}

	static function getSpecials()
	{
	return array(
	    array('id'=>'1', 'special'=>'Yes'),
	    array('id'=>'0', 'special'=>'No'),
	);
	}
	static function getSpecial($onoff)
	{
	if($onoff == 1) 
	    return 'Yes';
	else 
	    return 'No';
	}

}