<?php

/**
 * This is the model base class for the table "billing_drug".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "BillingDrug".
 *
 * Columns in table "billing_drug" available as properties of the model,
 * followed by relations of table "billing_drug" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idinvoice
 * @property integer $iddrug
 * @property integer $quantity
 *
 * @property Invoice $idinvoice0
 * @property Drugs $iddrug0
 */
abstract class BaseBillingDrug extends GxActiveRecord {

	public $insurencePrice;
    public $total;
    public $paid;
    public $cash;
    public $drug;
    public $companyPrice;

     public $idinvoice;
     public $iddrug;
     public $quantity;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'billing_drug';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Billing Drug|Billing Drugs', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('idinvoice, iddrug, quantity', 'required'),
			array('idinvoice, iddrug, quantity', 'numerical', 'integerOnly'=>true),
			array('id, idinvoice, iddrug, quantity', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idinvoice0' => array(self::BELONGS_TO, 'Invoice', 'idinvoice'),
			'iddrug0' => array(self::BELONGS_TO, 'Drugs', 'iddrug'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idinvoice' => null,
			'iddrug' => null,
			'quantity' => Yii::t('app', 'Quantity'),
			'idinvoice0' => null,
			'iddrug0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idinvoice', $this->idinvoice);
		$criteria->compare('iddrug', $this->iddrug);
		$criteria->compare('quantity', $this->quantity);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}



public function bill_invoice() {

        $dataProvider=new CActiveDataProvider('BillingDrug', array(
		'criteria'=>array(
		    'condition'=>'idinvoice=:id',
		    'select' => 'ds.cash cash,t.quantity,t.idinvoice,ds.drug drug,t.id,(ds.cash*t.quantity) total,(ds.cash*0.15*t.quantity) insurencePrice,(ds.cash*0.85*t.quantity) companyPrice',
		    'join' => 'LEFT JOIN drugs ds on ds.id = t.iddrug',
		    'params'=>array(
		        ':id'=>$_GET['idinvoice']),
		     ),
		));

    return $dataProvider;
	}



public function bill_invoice_accountant($idinvoice) {

        $dataProvider=new CActiveDataProvider('BillingDrug', array(
		'criteria'=>array(
		    'condition'=>'idinvoice=:id',
		    'select' => 'ds.cash cash,t.quantity,t.idinvoice,ds.drug drug,t.id,(ds.cash*t.quantity) total,(ds.cash*0.15*t.quantity) insurencePrice,(ds.cash*0.85*t.quantity) companyPrice',
		    'join' => 'LEFT JOIN drugs ds on ds.id = t.iddrug',
		    'params'=>array(
		        ':id'=>$idinvoice),
		     ),
		));

    return $dataProvider;
	}


	public function sum_invoice() {
     

	$dataProvider=new CActiveDataProvider('BillingDrug', array(
			'criteria'=>array(
			    'condition'=>'idinvoice=:id',
			    'select' => 'sum(ds.cash*0.15*quantity) paid',
			    'join' => 'LEFT JOIN drugs ds on ds.id = t.iddrug',
			    'params'=>array(
			        ':id'=>$_GET['idinvoice']),
			     ),
			));

	    return $dataProvider;

		}
}