<?php

/**
 * This is the model base class for the table "ordonance".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Ordonance".
 *
 * Columns in table "ordonance" available as properties of the model,
 * followed by relations of table "ordonance" available as properties of the model.
 *
 * @property integer $id
 * @property string $eye
 * @property string $type
 * @property string $typeofglass
 * @property string $vision
 * @property string $lunette
 * @property double $interpupillarydistance
 * @property integer $idinvoice
 *
 * @property Invoice $idinvoice0
 */
abstract class BaseOrdonance extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'ordonance';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Ordonance|Ordonances', $n);
	}

	public static function representingColumn() {
		return 'eye';
	}

	public function rules() {
		return array(
			array('eye, type, typeofglass, vision, lunette, interpupillarydistance, idinvoice', 'required'),
			array('idinvoice', 'numerical', 'integerOnly'=>true),
			array('interpupillarydistance', 'numerical'),
			array('eye, type, typeofglass, vision, lunette', 'length', 'max'=>30),
			array('id, eye, type, typeofglass, vision, lunette, interpupillarydistance, idinvoice', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idinvoice0' => array(self::BELONGS_TO, 'Invoice', 'idinvoice'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'eye' => Yii::t('app', 'Eye'),
			'type' => Yii::t('app', 'Type'),
			'typeofglass' => Yii::t('app', 'Typeofglass'),
			'vision' => Yii::t('app', 'Vision'),
			'lunette' => Yii::t('app', 'Lunette'),
			'interpupillarydistance' => Yii::t('app', 'Interpupillarydistance'),
			'idinvoice' => null,
			'idinvoice0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
       if(isset($_GET['idinvoice'])){

        	 $criteria->addCondition('idinvoice='.$_GET['idinvoice']);
        }
		$criteria->compare('id', $this->id);
		$criteria->compare('eye', $this->eye, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('typeofglass', $this->typeofglass, true);
		$criteria->compare('vision', $this->vision, true);
		$criteria->compare('lunette', $this->lunette, true);
		$criteria->compare('interpupillarydistance', $this->interpupillarydistance);
		$criteria->compare('idinvoice', $this->idinvoice);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}